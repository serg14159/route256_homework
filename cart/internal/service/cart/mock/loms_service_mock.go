// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/service/cart.ILomsService -o loms_service_mock.go -n ILomsServiceMock -p mock

import (
	"context"
	"route256/cart/internal/models"
	"route256/loms/pkg/api/loms/v1"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ILomsServiceMock implements mm_service.ILomsService
type ILomsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOrderCreate          func(ctx context.Context, user int64, items []*loms.Item) (i1 int64, err error)
	funcOrderCreateOrigin    string
	inspectFuncOrderCreate   func(ctx context.Context, user int64, items []*loms.Item)
	afterOrderCreateCounter  uint64
	beforeOrderCreateCounter uint64
	OrderCreateMock          mILomsServiceMockOrderCreate

	funcStocksInfo          func(ctx context.Context, SKU models.SKU) (i1 int64, err error)
	funcStocksInfoOrigin    string
	inspectFuncStocksInfo   func(ctx context.Context, SKU models.SKU)
	afterStocksInfoCounter  uint64
	beforeStocksInfoCounter uint64
	StocksInfoMock          mILomsServiceMockStocksInfo
}

// NewILomsServiceMock returns a mock for mm_service.ILomsService
func NewILomsServiceMock(t minimock.Tester) *ILomsServiceMock {
	m := &ILomsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OrderCreateMock = mILomsServiceMockOrderCreate{mock: m}
	m.OrderCreateMock.callArgs = []*ILomsServiceMockOrderCreateParams{}

	m.StocksInfoMock = mILomsServiceMockStocksInfo{mock: m}
	m.StocksInfoMock.callArgs = []*ILomsServiceMockStocksInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mILomsServiceMockOrderCreate struct {
	optional           bool
	mock               *ILomsServiceMock
	defaultExpectation *ILomsServiceMockOrderCreateExpectation
	expectations       []*ILomsServiceMockOrderCreateExpectation

	callArgs []*ILomsServiceMockOrderCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ILomsServiceMockOrderCreateExpectation specifies expectation struct of the ILomsService.OrderCreate
type ILomsServiceMockOrderCreateExpectation struct {
	mock               *ILomsServiceMock
	params             *ILomsServiceMockOrderCreateParams
	paramPtrs          *ILomsServiceMockOrderCreateParamPtrs
	expectationOrigins ILomsServiceMockOrderCreateExpectationOrigins
	results            *ILomsServiceMockOrderCreateResults
	returnOrigin       string
	Counter            uint64
}

// ILomsServiceMockOrderCreateParams contains parameters of the ILomsService.OrderCreate
type ILomsServiceMockOrderCreateParams struct {
	ctx   context.Context
	user  int64
	items []*loms.Item
}

// ILomsServiceMockOrderCreateParamPtrs contains pointers to parameters of the ILomsService.OrderCreate
type ILomsServiceMockOrderCreateParamPtrs struct {
	ctx   *context.Context
	user  *int64
	items *[]*loms.Item
}

// ILomsServiceMockOrderCreateResults contains results of the ILomsService.OrderCreate
type ILomsServiceMockOrderCreateResults struct {
	i1  int64
	err error
}

// ILomsServiceMockOrderCreateOrigins contains origins of expectations of the ILomsService.OrderCreate
type ILomsServiceMockOrderCreateExpectationOrigins struct {
	origin      string
	originCtx   string
	originUser  string
	originItems string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOrderCreate *mILomsServiceMockOrderCreate) Optional() *mILomsServiceMockOrderCreate {
	mmOrderCreate.optional = true
	return mmOrderCreate
}

// Expect sets up expected params for ILomsService.OrderCreate
func (mmOrderCreate *mILomsServiceMockOrderCreate) Expect(ctx context.Context, user int64, items []*loms.Item) *mILomsServiceMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &ILomsServiceMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.paramPtrs != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by ExpectParams functions")
	}

	mmOrderCreate.defaultExpectation.params = &ILomsServiceMockOrderCreateParams{ctx, user, items}
	mmOrderCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOrderCreate.expectations {
		if minimock.Equal(e.params, mmOrderCreate.defaultExpectation.params) {
			mmOrderCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOrderCreate.defaultExpectation.params)
		}
	}

	return mmOrderCreate
}

// ExpectCtxParam1 sets up expected param ctx for ILomsService.OrderCreate
func (mmOrderCreate *mILomsServiceMockOrderCreate) ExpectCtxParam1(ctx context.Context) *mILomsServiceMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &ILomsServiceMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &ILomsServiceMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmOrderCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmOrderCreate
}

// ExpectUserParam2 sets up expected param user for ILomsService.OrderCreate
func (mmOrderCreate *mILomsServiceMockOrderCreate) ExpectUserParam2(user int64) *mILomsServiceMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &ILomsServiceMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &ILomsServiceMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.user = &user
	mmOrderCreate.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmOrderCreate
}

// ExpectItemsParam3 sets up expected param items for ILomsService.OrderCreate
func (mmOrderCreate *mILomsServiceMockOrderCreate) ExpectItemsParam3(items []*loms.Item) *mILomsServiceMockOrderCreate {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &ILomsServiceMockOrderCreateExpectation{}
	}

	if mmOrderCreate.defaultExpectation.params != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Expect")
	}

	if mmOrderCreate.defaultExpectation.paramPtrs == nil {
		mmOrderCreate.defaultExpectation.paramPtrs = &ILomsServiceMockOrderCreateParamPtrs{}
	}
	mmOrderCreate.defaultExpectation.paramPtrs.items = &items
	mmOrderCreate.defaultExpectation.expectationOrigins.originItems = minimock.CallerInfo(1)

	return mmOrderCreate
}

// Inspect accepts an inspector function that has same arguments as the ILomsService.OrderCreate
func (mmOrderCreate *mILomsServiceMockOrderCreate) Inspect(f func(ctx context.Context, user int64, items []*loms.Item)) *mILomsServiceMockOrderCreate {
	if mmOrderCreate.mock.inspectFuncOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("Inspect function is already set for ILomsServiceMock.OrderCreate")
	}

	mmOrderCreate.mock.inspectFuncOrderCreate = f

	return mmOrderCreate
}

// Return sets up results that will be returned by ILomsService.OrderCreate
func (mmOrderCreate *mILomsServiceMockOrderCreate) Return(i1 int64, err error) *ILomsServiceMock {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Set")
	}

	if mmOrderCreate.defaultExpectation == nil {
		mmOrderCreate.defaultExpectation = &ILomsServiceMockOrderCreateExpectation{mock: mmOrderCreate.mock}
	}
	mmOrderCreate.defaultExpectation.results = &ILomsServiceMockOrderCreateResults{i1, err}
	mmOrderCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOrderCreate.mock
}

// Set uses given function f to mock the ILomsService.OrderCreate method
func (mmOrderCreate *mILomsServiceMockOrderCreate) Set(f func(ctx context.Context, user int64, items []*loms.Item) (i1 int64, err error)) *ILomsServiceMock {
	if mmOrderCreate.defaultExpectation != nil {
		mmOrderCreate.mock.t.Fatalf("Default expectation is already set for the ILomsService.OrderCreate method")
	}

	if len(mmOrderCreate.expectations) > 0 {
		mmOrderCreate.mock.t.Fatalf("Some expectations are already set for the ILomsService.OrderCreate method")
	}

	mmOrderCreate.mock.funcOrderCreate = f
	mmOrderCreate.mock.funcOrderCreateOrigin = minimock.CallerInfo(1)
	return mmOrderCreate.mock
}

// When sets expectation for the ILomsService.OrderCreate which will trigger the result defined by the following
// Then helper
func (mmOrderCreate *mILomsServiceMockOrderCreate) When(ctx context.Context, user int64, items []*loms.Item) *ILomsServiceMockOrderCreateExpectation {
	if mmOrderCreate.mock.funcOrderCreate != nil {
		mmOrderCreate.mock.t.Fatalf("ILomsServiceMock.OrderCreate mock is already set by Set")
	}

	expectation := &ILomsServiceMockOrderCreateExpectation{
		mock:               mmOrderCreate.mock,
		params:             &ILomsServiceMockOrderCreateParams{ctx, user, items},
		expectationOrigins: ILomsServiceMockOrderCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmOrderCreate.expectations = append(mmOrderCreate.expectations, expectation)
	return expectation
}

// Then sets up ILomsService.OrderCreate return parameters for the expectation previously defined by the When method
func (e *ILomsServiceMockOrderCreateExpectation) Then(i1 int64, err error) *ILomsServiceMock {
	e.results = &ILomsServiceMockOrderCreateResults{i1, err}
	return e.mock
}

// Times sets number of times ILomsService.OrderCreate should be invoked
func (mmOrderCreate *mILomsServiceMockOrderCreate) Times(n uint64) *mILomsServiceMockOrderCreate {
	if n == 0 {
		mmOrderCreate.mock.t.Fatalf("Times of ILomsServiceMock.OrderCreate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOrderCreate.expectedInvocations, n)
	mmOrderCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOrderCreate
}

func (mmOrderCreate *mILomsServiceMockOrderCreate) invocationsDone() bool {
	if len(mmOrderCreate.expectations) == 0 && mmOrderCreate.defaultExpectation == nil && mmOrderCreate.mock.funcOrderCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOrderCreate.mock.afterOrderCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOrderCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OrderCreate implements mm_service.ILomsService
func (mmOrderCreate *ILomsServiceMock) OrderCreate(ctx context.Context, user int64, items []*loms.Item) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmOrderCreate.beforeOrderCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmOrderCreate.afterOrderCreateCounter, 1)

	mmOrderCreate.t.Helper()

	if mmOrderCreate.inspectFuncOrderCreate != nil {
		mmOrderCreate.inspectFuncOrderCreate(ctx, user, items)
	}

	mm_params := ILomsServiceMockOrderCreateParams{ctx, user, items}

	// Record call args
	mmOrderCreate.OrderCreateMock.mutex.Lock()
	mmOrderCreate.OrderCreateMock.callArgs = append(mmOrderCreate.OrderCreateMock.callArgs, &mm_params)
	mmOrderCreate.OrderCreateMock.mutex.Unlock()

	for _, e := range mmOrderCreate.OrderCreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmOrderCreate.OrderCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOrderCreate.OrderCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmOrderCreate.OrderCreateMock.defaultExpectation.params
		mm_want_ptrs := mmOrderCreate.OrderCreateMock.defaultExpectation.paramPtrs

		mm_got := ILomsServiceMockOrderCreateParams{ctx, user, items}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmOrderCreate.t.Errorf("ILomsServiceMock.OrderCreate got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmOrderCreate.t.Errorf("ILomsServiceMock.OrderCreate got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

			if mm_want_ptrs.items != nil && !minimock.Equal(*mm_want_ptrs.items, mm_got.items) {
				mmOrderCreate.t.Errorf("ILomsServiceMock.OrderCreate got unexpected parameter items, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.originItems, *mm_want_ptrs.items, mm_got.items, minimock.Diff(*mm_want_ptrs.items, mm_got.items))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOrderCreate.t.Errorf("ILomsServiceMock.OrderCreate got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOrderCreate.OrderCreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmOrderCreate.OrderCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmOrderCreate.t.Fatal("No results are set for the ILomsServiceMock.OrderCreate")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmOrderCreate.funcOrderCreate != nil {
		return mmOrderCreate.funcOrderCreate(ctx, user, items)
	}
	mmOrderCreate.t.Fatalf("Unexpected call to ILomsServiceMock.OrderCreate. %v %v %v", ctx, user, items)
	return
}

// OrderCreateAfterCounter returns a count of finished ILomsServiceMock.OrderCreate invocations
func (mmOrderCreate *ILomsServiceMock) OrderCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.afterOrderCreateCounter)
}

// OrderCreateBeforeCounter returns a count of ILomsServiceMock.OrderCreate invocations
func (mmOrderCreate *ILomsServiceMock) OrderCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOrderCreate.beforeOrderCreateCounter)
}

// Calls returns a list of arguments used in each call to ILomsServiceMock.OrderCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOrderCreate *mILomsServiceMockOrderCreate) Calls() []*ILomsServiceMockOrderCreateParams {
	mmOrderCreate.mutex.RLock()

	argCopy := make([]*ILomsServiceMockOrderCreateParams, len(mmOrderCreate.callArgs))
	copy(argCopy, mmOrderCreate.callArgs)

	mmOrderCreate.mutex.RUnlock()

	return argCopy
}

// MinimockOrderCreateDone returns true if the count of the OrderCreate invocations corresponds
// the number of defined expectations
func (m *ILomsServiceMock) MinimockOrderCreateDone() bool {
	if m.OrderCreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OrderCreateMock.invocationsDone()
}

// MinimockOrderCreateInspect logs each unmet expectation
func (m *ILomsServiceMock) MinimockOrderCreateInspect() {
	for _, e := range m.OrderCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ILomsServiceMock.OrderCreate at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOrderCreateCounter := mm_atomic.LoadUint64(&m.afterOrderCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OrderCreateMock.defaultExpectation != nil && afterOrderCreateCounter < 1 {
		if m.OrderCreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ILomsServiceMock.OrderCreate at\n%s", m.OrderCreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ILomsServiceMock.OrderCreate at\n%s with params: %#v", m.OrderCreateMock.defaultExpectation.expectationOrigins.origin, *m.OrderCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOrderCreate != nil && afterOrderCreateCounter < 1 {
		m.t.Errorf("Expected call to ILomsServiceMock.OrderCreate at\n%s", m.funcOrderCreateOrigin)
	}

	if !m.OrderCreateMock.invocationsDone() && afterOrderCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to ILomsServiceMock.OrderCreate at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OrderCreateMock.expectedInvocations), m.OrderCreateMock.expectedInvocationsOrigin, afterOrderCreateCounter)
	}
}

type mILomsServiceMockStocksInfo struct {
	optional           bool
	mock               *ILomsServiceMock
	defaultExpectation *ILomsServiceMockStocksInfoExpectation
	expectations       []*ILomsServiceMockStocksInfoExpectation

	callArgs []*ILomsServiceMockStocksInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ILomsServiceMockStocksInfoExpectation specifies expectation struct of the ILomsService.StocksInfo
type ILomsServiceMockStocksInfoExpectation struct {
	mock               *ILomsServiceMock
	params             *ILomsServiceMockStocksInfoParams
	paramPtrs          *ILomsServiceMockStocksInfoParamPtrs
	expectationOrigins ILomsServiceMockStocksInfoExpectationOrigins
	results            *ILomsServiceMockStocksInfoResults
	returnOrigin       string
	Counter            uint64
}

// ILomsServiceMockStocksInfoParams contains parameters of the ILomsService.StocksInfo
type ILomsServiceMockStocksInfoParams struct {
	ctx context.Context
	SKU models.SKU
}

// ILomsServiceMockStocksInfoParamPtrs contains pointers to parameters of the ILomsService.StocksInfo
type ILomsServiceMockStocksInfoParamPtrs struct {
	ctx *context.Context
	SKU *models.SKU
}

// ILomsServiceMockStocksInfoResults contains results of the ILomsService.StocksInfo
type ILomsServiceMockStocksInfoResults struct {
	i1  int64
	err error
}

// ILomsServiceMockStocksInfoOrigins contains origins of expectations of the ILomsService.StocksInfo
type ILomsServiceMockStocksInfoExpectationOrigins struct {
	origin    string
	originCtx string
	originSKU string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStocksInfo *mILomsServiceMockStocksInfo) Optional() *mILomsServiceMockStocksInfo {
	mmStocksInfo.optional = true
	return mmStocksInfo
}

// Expect sets up expected params for ILomsService.StocksInfo
func (mmStocksInfo *mILomsServiceMockStocksInfo) Expect(ctx context.Context, SKU models.SKU) *mILomsServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &ILomsServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.paramPtrs != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by ExpectParams functions")
	}

	mmStocksInfo.defaultExpectation.params = &ILomsServiceMockStocksInfoParams{ctx, SKU}
	mmStocksInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStocksInfo.expectations {
		if minimock.Equal(e.params, mmStocksInfo.defaultExpectation.params) {
			mmStocksInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocksInfo.defaultExpectation.params)
		}
	}

	return mmStocksInfo
}

// ExpectCtxParam1 sets up expected param ctx for ILomsService.StocksInfo
func (mmStocksInfo *mILomsServiceMockStocksInfo) ExpectCtxParam1(ctx context.Context) *mILomsServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &ILomsServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &ILomsServiceMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.ctx = &ctx
	mmStocksInfo.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmStocksInfo
}

// ExpectSKUParam2 sets up expected param SKU for ILomsService.StocksInfo
func (mmStocksInfo *mILomsServiceMockStocksInfo) ExpectSKUParam2(SKU models.SKU) *mILomsServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &ILomsServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &ILomsServiceMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.SKU = &SKU
	mmStocksInfo.defaultExpectation.expectationOrigins.originSKU = minimock.CallerInfo(1)

	return mmStocksInfo
}

// Inspect accepts an inspector function that has same arguments as the ILomsService.StocksInfo
func (mmStocksInfo *mILomsServiceMockStocksInfo) Inspect(f func(ctx context.Context, SKU models.SKU)) *mILomsServiceMockStocksInfo {
	if mmStocksInfo.mock.inspectFuncStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("Inspect function is already set for ILomsServiceMock.StocksInfo")
	}

	mmStocksInfo.mock.inspectFuncStocksInfo = f

	return mmStocksInfo
}

// Return sets up results that will be returned by ILomsService.StocksInfo
func (mmStocksInfo *mILomsServiceMockStocksInfo) Return(i1 int64, err error) *ILomsServiceMock {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &ILomsServiceMockStocksInfoExpectation{mock: mmStocksInfo.mock}
	}
	mmStocksInfo.defaultExpectation.results = &ILomsServiceMockStocksInfoResults{i1, err}
	mmStocksInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStocksInfo.mock
}

// Set uses given function f to mock the ILomsService.StocksInfo method
func (mmStocksInfo *mILomsServiceMockStocksInfo) Set(f func(ctx context.Context, SKU models.SKU) (i1 int64, err error)) *ILomsServiceMock {
	if mmStocksInfo.defaultExpectation != nil {
		mmStocksInfo.mock.t.Fatalf("Default expectation is already set for the ILomsService.StocksInfo method")
	}

	if len(mmStocksInfo.expectations) > 0 {
		mmStocksInfo.mock.t.Fatalf("Some expectations are already set for the ILomsService.StocksInfo method")
	}

	mmStocksInfo.mock.funcStocksInfo = f
	mmStocksInfo.mock.funcStocksInfoOrigin = minimock.CallerInfo(1)
	return mmStocksInfo.mock
}

// When sets expectation for the ILomsService.StocksInfo which will trigger the result defined by the following
// Then helper
func (mmStocksInfo *mILomsServiceMockStocksInfo) When(ctx context.Context, SKU models.SKU) *ILomsServiceMockStocksInfoExpectation {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("ILomsServiceMock.StocksInfo mock is already set by Set")
	}

	expectation := &ILomsServiceMockStocksInfoExpectation{
		mock:               mmStocksInfo.mock,
		params:             &ILomsServiceMockStocksInfoParams{ctx, SKU},
		expectationOrigins: ILomsServiceMockStocksInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStocksInfo.expectations = append(mmStocksInfo.expectations, expectation)
	return expectation
}

// Then sets up ILomsService.StocksInfo return parameters for the expectation previously defined by the When method
func (e *ILomsServiceMockStocksInfoExpectation) Then(i1 int64, err error) *ILomsServiceMock {
	e.results = &ILomsServiceMockStocksInfoResults{i1, err}
	return e.mock
}

// Times sets number of times ILomsService.StocksInfo should be invoked
func (mmStocksInfo *mILomsServiceMockStocksInfo) Times(n uint64) *mILomsServiceMockStocksInfo {
	if n == 0 {
		mmStocksInfo.mock.t.Fatalf("Times of ILomsServiceMock.StocksInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStocksInfo.expectedInvocations, n)
	mmStocksInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStocksInfo
}

func (mmStocksInfo *mILomsServiceMockStocksInfo) invocationsDone() bool {
	if len(mmStocksInfo.expectations) == 0 && mmStocksInfo.defaultExpectation == nil && mmStocksInfo.mock.funcStocksInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStocksInfo.mock.afterStocksInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStocksInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StocksInfo implements mm_service.ILomsService
func (mmStocksInfo *ILomsServiceMock) StocksInfo(ctx context.Context, SKU models.SKU) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmStocksInfo.beforeStocksInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStocksInfo.afterStocksInfoCounter, 1)

	mmStocksInfo.t.Helper()

	if mmStocksInfo.inspectFuncStocksInfo != nil {
		mmStocksInfo.inspectFuncStocksInfo(ctx, SKU)
	}

	mm_params := ILomsServiceMockStocksInfoParams{ctx, SKU}

	// Record call args
	mmStocksInfo.StocksInfoMock.mutex.Lock()
	mmStocksInfo.StocksInfoMock.callArgs = append(mmStocksInfo.StocksInfoMock.callArgs, &mm_params)
	mmStocksInfo.StocksInfoMock.mutex.Unlock()

	for _, e := range mmStocksInfo.StocksInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmStocksInfo.StocksInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocksInfo.StocksInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStocksInfo.StocksInfoMock.defaultExpectation.params
		mm_want_ptrs := mmStocksInfo.StocksInfoMock.defaultExpectation.paramPtrs

		mm_got := ILomsServiceMockStocksInfoParams{ctx, SKU}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStocksInfo.t.Errorf("ILomsServiceMock.StocksInfo got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.SKU != nil && !minimock.Equal(*mm_want_ptrs.SKU, mm_got.SKU) {
				mmStocksInfo.t.Errorf("ILomsServiceMock.StocksInfo got unexpected parameter SKU, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.originSKU, *mm_want_ptrs.SKU, mm_got.SKU, minimock.Diff(*mm_want_ptrs.SKU, mm_got.SKU))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocksInfo.t.Errorf("ILomsServiceMock.StocksInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocksInfo.StocksInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStocksInfo.t.Fatal("No results are set for the ILomsServiceMock.StocksInfo")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmStocksInfo.funcStocksInfo != nil {
		return mmStocksInfo.funcStocksInfo(ctx, SKU)
	}
	mmStocksInfo.t.Fatalf("Unexpected call to ILomsServiceMock.StocksInfo. %v %v", ctx, SKU)
	return
}

// StocksInfoAfterCounter returns a count of finished ILomsServiceMock.StocksInfo invocations
func (mmStocksInfo *ILomsServiceMock) StocksInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.afterStocksInfoCounter)
}

// StocksInfoBeforeCounter returns a count of ILomsServiceMock.StocksInfo invocations
func (mmStocksInfo *ILomsServiceMock) StocksInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.beforeStocksInfoCounter)
}

// Calls returns a list of arguments used in each call to ILomsServiceMock.StocksInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocksInfo *mILomsServiceMockStocksInfo) Calls() []*ILomsServiceMockStocksInfoParams {
	mmStocksInfo.mutex.RLock()

	argCopy := make([]*ILomsServiceMockStocksInfoParams, len(mmStocksInfo.callArgs))
	copy(argCopy, mmStocksInfo.callArgs)

	mmStocksInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStocksInfoDone returns true if the count of the StocksInfo invocations corresponds
// the number of defined expectations
func (m *ILomsServiceMock) MinimockStocksInfoDone() bool {
	if m.StocksInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StocksInfoMock.invocationsDone()
}

// MinimockStocksInfoInspect logs each unmet expectation
func (m *ILomsServiceMock) MinimockStocksInfoInspect() {
	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ILomsServiceMock.StocksInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStocksInfoCounter := mm_atomic.LoadUint64(&m.afterStocksInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StocksInfoMock.defaultExpectation != nil && afterStocksInfoCounter < 1 {
		if m.StocksInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ILomsServiceMock.StocksInfo at\n%s", m.StocksInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ILomsServiceMock.StocksInfo at\n%s with params: %#v", m.StocksInfoMock.defaultExpectation.expectationOrigins.origin, *m.StocksInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocksInfo != nil && afterStocksInfoCounter < 1 {
		m.t.Errorf("Expected call to ILomsServiceMock.StocksInfo at\n%s", m.funcStocksInfoOrigin)
	}

	if !m.StocksInfoMock.invocationsDone() && afterStocksInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to ILomsServiceMock.StocksInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StocksInfoMock.expectedInvocations), m.StocksInfoMock.expectedInvocationsOrigin, afterStocksInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ILomsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOrderCreateInspect()

			m.MinimockStocksInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ILomsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ILomsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOrderCreateDone() &&
		m.MinimockStocksInfoDone()
}
