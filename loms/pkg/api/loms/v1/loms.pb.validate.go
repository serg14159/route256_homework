// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: loms.proto

package loms

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderID() <= 0 {
		err := OrderValidationError{
			field:  "OrderID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if m.GetUser() <= 0 {
		err := OrderValidationError{
			field:  "User",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSku() <= 0 {
		err := ItemValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCount() <= 0 {
		err := ItemValidationError{
			field:  "Count",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}

	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on OrderCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCreateRequestMultiError, or nil if none found.
func (m *OrderCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() <= 0 {
		err := OrderCreateRequestValidationError{
			field:  "User",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetItems()) < 1 {
		err := OrderCreateRequestValidationError{
			field:  "Items",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderCreateRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderCreateRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderCreateRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderCreateRequestMultiError(errors)
	}

	return nil
}

// OrderCreateRequestMultiError is an error wrapping multiple validation errors
// returned by OrderCreateRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCreateRequestMultiError) AllErrors() []error { return m }

// OrderCreateRequestValidationError is the validation error returned by
// OrderCreateRequest.Validate if the designated constraints aren't met.
type OrderCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCreateRequestValidationError) ErrorName() string {
	return "OrderCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCreateRequestValidationError{}

// Validate checks the field values on OrderCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCreateResponseMultiError, or nil if none found.
func (m *OrderCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	if len(errors) > 0 {
		return OrderCreateResponseMultiError(errors)
	}

	return nil
}

// OrderCreateResponseMultiError is an error wrapping multiple validation
// errors returned by OrderCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCreateResponseMultiError) AllErrors() []error { return m }

// OrderCreateResponseValidationError is the validation error returned by
// OrderCreateResponse.Validate if the designated constraints aren't met.
type OrderCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCreateResponseValidationError) ErrorName() string {
	return "OrderCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCreateResponseValidationError{}

// Validate checks the field values on OrderInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderInfoRequestMultiError, or nil if none found.
func (m *OrderInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderID() <= 0 {
		err := OrderInfoRequestValidationError{
			field:  "OrderID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderInfoRequestMultiError(errors)
	}

	return nil
}

// OrderInfoRequestMultiError is an error wrapping multiple validation errors
// returned by OrderInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderInfoRequestMultiError) AllErrors() []error { return m }

// OrderInfoRequestValidationError is the validation error returned by
// OrderInfoRequest.Validate if the designated constraints aren't met.
type OrderInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderInfoRequestValidationError) ErrorName() string { return "OrderInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderInfoRequestValidationError{}

// Validate checks the field values on OrderInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderInfoResponseMultiError, or nil if none found.
func (m *OrderInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if m.GetUser() <= 0 {
		err := OrderInfoResponseValidationError{
			field:  "User",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderInfoResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderInfoResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderInfoResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderInfoResponseMultiError(errors)
	}

	return nil
}

// OrderInfoResponseMultiError is an error wrapping multiple validation errors
// returned by OrderInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderInfoResponseMultiError) AllErrors() []error { return m }

// OrderInfoResponseValidationError is the validation error returned by
// OrderInfoResponse.Validate if the designated constraints aren't met.
type OrderInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderInfoResponseValidationError) ErrorName() string {
	return "OrderInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderInfoResponseValidationError{}

// Validate checks the field values on OrderPayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderPayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderPayRequestMultiError, or nil if none found.
func (m *OrderPayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderID() <= 0 {
		err := OrderPayRequestValidationError{
			field:  "OrderID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderPayRequestMultiError(errors)
	}

	return nil
}

// OrderPayRequestMultiError is an error wrapping multiple validation errors
// returned by OrderPayRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderPayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPayRequestMultiError) AllErrors() []error { return m }

// OrderPayRequestValidationError is the validation error returned by
// OrderPayRequest.Validate if the designated constraints aren't met.
type OrderPayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPayRequestValidationError) ErrorName() string { return "OrderPayRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderPayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPayRequestValidationError{}

// Validate checks the field values on OrderPayResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderPayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderPayResponseMultiError, or nil if none found.
func (m *OrderPayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderPayResponseMultiError(errors)
	}

	return nil
}

// OrderPayResponseMultiError is an error wrapping multiple validation errors
// returned by OrderPayResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderPayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPayResponseMultiError) AllErrors() []error { return m }

// OrderPayResponseValidationError is the validation error returned by
// OrderPayResponse.Validate if the designated constraints aren't met.
type OrderPayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPayResponseValidationError) ErrorName() string { return "OrderPayResponseValidationError" }

// Error satisfies the builtin error interface
func (e OrderPayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPayResponseValidationError{}

// Validate checks the field values on OrderCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCancelRequestMultiError, or nil if none found.
func (m *OrderCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderID() <= 0 {
		err := OrderCancelRequestValidationError{
			field:  "OrderID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderCancelRequestMultiError(errors)
	}

	return nil
}

// OrderCancelRequestMultiError is an error wrapping multiple validation errors
// returned by OrderCancelRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCancelRequestMultiError) AllErrors() []error { return m }

// OrderCancelRequestValidationError is the validation error returned by
// OrderCancelRequest.Validate if the designated constraints aren't met.
type OrderCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCancelRequestValidationError) ErrorName() string {
	return "OrderCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCancelRequestValidationError{}

// Validate checks the field values on OrderCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCancelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCancelResponseMultiError, or nil if none found.
func (m *OrderCancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderCancelResponseMultiError(errors)
	}

	return nil
}

// OrderCancelResponseMultiError is an error wrapping multiple validation
// errors returned by OrderCancelResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderCancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCancelResponseMultiError) AllErrors() []error { return m }

// OrderCancelResponseValidationError is the validation error returned by
// OrderCancelResponse.Validate if the designated constraints aren't met.
type OrderCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCancelResponseValidationError) ErrorName() string {
	return "OrderCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCancelResponseValidationError{}

// Validate checks the field values on OrderListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListRequestMultiError, or nil if none found.
func (m *OrderListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderListRequestMultiError(errors)
	}

	return nil
}

// OrderListRequestMultiError is an error wrapping multiple validation errors
// returned by OrderListRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListRequestMultiError) AllErrors() []error { return m }

// OrderListRequestValidationError is the validation error returned by
// OrderListRequest.Validate if the designated constraints aren't met.
type OrderListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListRequestValidationError) ErrorName() string { return "OrderListRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListRequestValidationError{}

// Validate checks the field values on OrderListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListResponseMultiError, or nil if none found.
func (m *OrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderListResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderListResponseMultiError(errors)
	}

	return nil
}

// OrderListResponseMultiError is an error wrapping multiple validation errors
// returned by OrderListResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListResponseMultiError) AllErrors() []error { return m }

// OrderListResponseValidationError is the validation error returned by
// OrderListResponse.Validate if the designated constraints aren't met.
type OrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListResponseValidationError) ErrorName() string {
	return "OrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListResponseValidationError{}

// Validate checks the field values on StocksInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StocksInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StocksInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StocksInfoRequestMultiError, or nil if none found.
func (m *StocksInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StocksInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSku() <= 0 {
		err := StocksInfoRequestValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StocksInfoRequestMultiError(errors)
	}

	return nil
}

// StocksInfoRequestMultiError is an error wrapping multiple validation errors
// returned by StocksInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type StocksInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StocksInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StocksInfoRequestMultiError) AllErrors() []error { return m }

// StocksInfoRequestValidationError is the validation error returned by
// StocksInfoRequest.Validate if the designated constraints aren't met.
type StocksInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StocksInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StocksInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StocksInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StocksInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StocksInfoRequestValidationError) ErrorName() string {
	return "StocksInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StocksInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStocksInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StocksInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StocksInfoRequestValidationError{}

// Validate checks the field values on StocksInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StocksInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StocksInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StocksInfoResponseMultiError, or nil if none found.
func (m *StocksInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StocksInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return StocksInfoResponseMultiError(errors)
	}

	return nil
}

// StocksInfoResponseMultiError is an error wrapping multiple validation errors
// returned by StocksInfoResponse.ValidateAll() if the designated constraints
// aren't met.
type StocksInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StocksInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StocksInfoResponseMultiError) AllErrors() []error { return m }

// StocksInfoResponseValidationError is the validation error returned by
// StocksInfoResponse.Validate if the designated constraints aren't met.
type StocksInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StocksInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StocksInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StocksInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StocksInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StocksInfoResponseValidationError) ErrorName() string {
	return "StocksInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StocksInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStocksInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StocksInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StocksInfoResponseValidationError{}
